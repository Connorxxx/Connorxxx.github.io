<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>FFmpeg 在 macOS 下使用 GPU硬件加速 功能</title>
    <link href="/2021/06/02/FFmpeg-%E5%9C%A8-macOS-%E4%B8%8B%E4%BD%BF%E7%94%A8-GPU%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F%E5%8A%9F%E8%83%BD/"/>
    <url>/2021/06/02/FFmpeg-%E5%9C%A8-macOS-%E4%B8%8B%E4%BD%BF%E7%94%A8-GPU%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>废话不多说, 直接看例子:</p><div class="code-wrapper"><pre><code class="hljs shell">ffmpeg -hwaccel videotoolbox -i input.mkv -c:v hevc_videotoolbox -b:v 13M -c:a copy output.mkv</code></pre></div><p><code>-hwaccel videotoolbox</code> 表示使用 macOS 的 videotoolbox 硬件编码器 </p><p> <code>hevc_videotoolbox</code> 表示使用 hevc 编码器, 要使用 h264 就改为 <code>h264_videotoolbox</code> </p><p><code>-b:v</code> 表示指定目标视频码率, 这里设为 13M. 使用 GPU 进行编码貌似会令 <code>-crf</code> 参数无效, 如果不指定码率的话, 视频画质将会惨不忍睹. </p><p>使用 GPU 硬件加速后基本不会有 CPU 占用, 而且编码速度也得到了极大的提高.</p>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS 美化 iTerm2 方案</title>
    <link href="/2021/05/21/macOS-%E7%BE%8E%E5%8C%96-iTerm2-%E6%96%B9%E6%A1%88/"/>
    <url>/2021/05/21/macOS-%E7%BE%8E%E5%8C%96-iTerm2-%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>今天尝试给 iTerm2 换完主题后发现效果非常不错, 就发到博客上记录一下.</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://cdn.jsdelivr.net/gh/Takuwy/oos@master/uPic/tGNu4D.png" alt="tGNu4D"></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>开始之前请安装好以下工具:</p><ul><li><a href="https://iterm2.com/">iTerm2</a> <del>(废话)</del></li><li><a href="https://github.com/tonsky/FiraCode">FiraCode</a> (某些字符需要 <a href="https://github.com/powerline/fonts">powerline patched font</a> 才能显示)</li><li><a href="https://brew.sh/">Homebrew</a></li><li><a href="https://git-scm.com/">Git</a></li></ul><p>把 iTerm2 字体改为 FiraCode</p><h3 id="安装-Oh-My-Zsh"><a href="#安装-Oh-My-Zsh" class="headerlink" title="安装 Oh My Zsh"></a>安装 Oh My Zsh</h3><p>Oh My Zsh 是一个开源的 zsh 管理工具, 可以让你以极为简单配置, 就可以用上 Zsh 复杂繁琐的功能. 要安装 Oh My Zsh 只需要在终端输入以下命令</p><div class="code-wrapper"><pre><code class="hljs shell">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></pre></div><h3 id="更改配色为-Dracula"><a href="#更改配色为-Dracula" class="headerlink" title="更改配色为 Dracula"></a>更改配色为 Dracula</h3><p>个人比较喜欢 Dracula 配色, 链接: <a href="https://draculatheme.com/iterm">https://draculatheme.com/iterm</a></p><p>下载解压后 <strong>Preferences -&gt; Profiles -&gt; Color -&gt; Color Presets -&gt; Import… -&gt; Dracula.itermcolors</strong> 完成</p><h3 id="安装-spaceship-主题"><a href="#安装-spaceship-主题" class="headerlink" title="安装 spaceship 主题"></a>安装 spaceship 主题</h3><h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><div class="code-wrapper"><pre><code class="hljs shell">git clone https://github.com/denysdovhan/spaceship-prompt.git &quot;$ZSH_CUSTOM/themes/spaceship-prompt&quot; --depth=1</code></pre></div><h4 id="链接到-oh-my-zsh"><a href="#链接到-oh-my-zsh" class="headerlink" title="链接到 oh-my-zsh"></a>链接到 oh-my-zsh</h4><div class="code-wrapper"><pre><code class="hljs shell">ln -s &quot;$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme&quot; &quot;$ZSH_CUSTOM/themes/spaceship.zsh-theme&quot;</code></pre></div><h4 id="修改-zshrc-文件并生效"><a href="#修改-zshrc-文件并生效" class="headerlink" title="修改  .zshrc 文件并生效"></a>修改  <code>.zshrc</code> 文件并生效</h4><div class="code-wrapper"><pre><code class="hljs shell">vim ~/.zshrc<span class="hljs-meta">#</span><span class="bash"> 主题修改为 spaceship</span>ZSH_THEME=&quot;spaceship&quot;<span class="hljs-meta">#</span><span class="bash"> 生效</span>source ~/.zshrc</code></pre></div><p>之后就是按需求修改主题风格了, 可以参考此配置文档: <a href="https://github.com/denysdovhan/spaceship-prompt/blob/master/docs/options.md">Options</a></p><p>个人不喜欢显示用户名, 所以添加了以下配置</p><div class="code-wrapper"><pre><code class="hljs JSON">SPACESHIP_USER_SHOW=<span class="hljs-string">&quot;false&quot;</span></code></pre></div><p>各位按需添加自己喜欢的就好</p><h2 id="安装好用的插件"><a href="#安装好用的插件" class="headerlink" title="安装好用的插件"></a>安装好用的插件</h2><p>博主推荐安装以下插件:</p><ul><li>autojump</li><li>zsh-autosuggestions</li><li>zsh-syntax-highlighting</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>autojump</code> : 实现文件夹间快速跳转, 想去哪个文件夹就 <code>j + 文件夹名</code></p><div class="code-wrapper"><pre><code class="hljs shell">brew install autojumpvim ~/.zshrc<span class="hljs-meta">#</span><span class="bash"> 找到 plugins, 添加</span>plugins=(autojump)<span class="hljs-meta">#</span><span class="bash"> 在末尾添加</span>  [ -f /usr/local/etc/profile.d/autojump.sh ] &amp;&amp; . /usr/local/etc/profile.d/autojump.sh</code></pre></div><p><code>zsh-autosuggestions</code> : 输入命令时提示自动补全, 按键盘 → 即可补全</p><div class="code-wrapper"><pre><code class="hljs shell">brew install zsh-autosuggestions<span class="hljs-meta">#</span><span class="bash"> 在末尾添加</span>source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh</code></pre></div><p><code>zsh-syntax-highlighting</code> : 人如其名, 语法高亮</p><div class="code-wrapper"><pre><code class="hljs shell">brew install zsh-syntax-highlighting<span class="hljs-meta">#</span><span class="bash"> 在末尾添加</span>source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code></pre></div><p>使插件生效</p><div class="code-wrapper"><pre><code class="hljs shell">source ~/.zshrc</code></pre></div><p>搞定收工!</p>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
      <tag>iTerm2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次解决 trustd 占用大量 CPU 的过程</title>
    <link href="/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3-trustd-%E5%8D%A0%E7%94%A8%E5%A4%A7%E9%87%8F-CPU-%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <url>/2021/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3-trustd-%E5%8D%A0%E7%94%A8%E5%A4%A7%E9%87%8F-CPU-%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>升级 macOS Big Sur 后偶然后发现 trustd 进程一直占用 cpu 高达  99%, 查阅一番后了解到 trustd 是用来管理 HTTPS 以及 App证书, 和钥匙串的. 知道它是干什么的之后解决起来就简单多了, 直接把钥匙串文件  <code>System.keychain</code> 删了即可解决.</p><h3 id="备份删除-System-keychain-文件"><a href="#备份删除-System-keychain-文件" class="headerlink" title="备份删除 System.keychain 文件"></a>备份删除 System.keychain 文件</h3><p>先把 <code>System.keychain</code> 备份到桌面, 以防万一出现问题将备份还原.</p><p>打开终端输入</p><div class="code-wrapper"><pre><code class="hljs shell">cp /Library/Keychains/System.keychain ~/Desktop</code></pre></div><p>不出意外桌面上就多出了一个 <code>System.keychain</code> 文件, 备份好之后将文件删除</p><div class="code-wrapper"><pre><code class="hljs shell">sudo rm /Library/Keychains/System.keychain</code></pre></div><p>输入密码, 搞定!</p><h3 id="重启电脑"><a href="#重启电脑" class="headerlink" title="重启电脑"></a>重启电脑</h3><p>现在已经删除了 <code>system.keychain</code> 文件, 重新启动 Mac, 将重新生成新的文件.</p><p>如果发生任何问题, 可以删除新的钥匙串文件, 然后将旧的文件放回原处.</p>]]></content>
    
    
    <categories>
      
      <category>记录向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 macOS Big Sur 上关闭平滑字体</title>
    <link href="/2021/05/07/%E5%9C%A8-macOS-Big-Sur-%E4%B8%8A%E5%85%B3%E9%97%AD%E5%B9%B3%E6%BB%91%E5%AD%97%E4%BD%93/"/>
    <url>/2021/05/07/%E5%9C%A8-macOS-Big-Sur-%E4%B8%8A%E5%85%B3%E9%97%AD%E5%B9%B3%E6%BB%91%E5%AD%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<p>将系统更新到 Big Sur 之后, 字体变得很粗, 看起来很模糊. 原因是苹果取消了 <strong>系统偏好设置 -&gt; 通用 -&gt; LCD 平滑字体</strong> 选项并重新启用了 LCD 平滑字体, 要想关闭也很简单, 在终端输入下列命令</p><div class="code-wrapper"><pre><code class="hljs shell">defaults -currentHost write -g AppleFontSmoothing -int 0</code></pre></div><p>重新登录后生效</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>你可以通过调整命令末尾的数字来调整平滑字体级别:</p><ul><li>0 禁用平滑字体</li><li>1 启用浅平滑字体</li><li>2 启用默认平滑字体</li><li>3 启用粗平滑字体</li></ul><p><em>如果需要重新开启 <strong>LCD 平滑字体</strong> 将 <strong>0</strong> 替换为 <strong>2</strong> 即可</em></p>]]></content>
    
    
    <categories>
      
      <category>记录向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Github+VPS 同步方案</title>
    <link href="/2021/05/02/Hexo-Github-VPS-%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/"/>
    <url>/2021/05/02/Hexo-Github-VPS-%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>在 GitHub 部署完 Hexo, 使用了之后非常喜欢,  博主原来的博客是用 WordPress 搭建的, 众所周知的原因在 WordPress 上使用 MarkDown 写博客是十分的痛苦, 就算是使用插件也有从写到发布的烦恼, 所以干脆就把原来的 WordPress 换成了 Hexo. Hexo 可以直接用 MarkDown 写文章, 写完后只要一条命令就能发布, 可以说是非常的方便和畅快了.</p><h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>请确保 VPS 安装了下列程序:</p><ul><li>Nginx</li><li>Git</li></ul><p>这里假定已经安装完了, 我就不赘述一遍安装过程了. </p><h3 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h3><p>在 Nginx 的站点上 clone 下在 Github 上托管的源码.进入站点所在的目录, 我的是<code>/www/wwwroot/www.wuyinghao.cn</code>, 然后把 GitHub 上的源码 clone 下来, 并且修改配置文件 server 下的 root 字段值修改为 clone 后的博客目录路径</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;    <span class="hljs-attribute">server_name</span> wuyinghao.cn www.wuyinghao.cn;    <span class="hljs-attribute">index</span> index.php index.html index.htm default.php default.htm default.html;    <span class="hljs-attribute">root</span> /www/wwwroot/www.wuyinghao.cn/Takuwy.github.io;    &#125;</code></pre></div><p>我的博客在 GitHub 的仓库名是 Takuwy.github.io, 所以修改为</p><p><code>root /www/wwwroot/www.wuyinghao.cn/Takuwy.github.io;</code></p><p>根据情况把上面的换成自己的就可以了.</p><p>现在可以通过域名访问存放在 VPS 上的博客了, 但还没完, 如果我们写了新的文章执行 <code>hexo g -d</code> 时只会将文章同步到 GitHub 上 而在VPS上则没有同步. </p><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><h3 id="创建-git-仓库"><a href="#创建-git-仓库" class="headerlink" title="创建 git 仓库"></a>创建 git 仓库</h3><p>创建 git 用户</p><div class="code-wrapper"><pre><code class="hljs shell">adduser git</code></pre></div><p>将 git 用户加到 root 用户组</p><div class="code-wrapper"><pre><code class="hljs shell">gpasswd -a git sudo</code></pre></div><p>创建 Git 仓库</p><div class="code-wrapper"><pre><code class="hljs shell">su gitcdmkdir blog.gitcd blog.gitgit init --bare</code></pre></div><p>变更 <code>/www/wwwroot/www.wuyinghao.cn/Takuwy.github.io</code> 目录拥有者为 <strong>git</strong></p><div class="code-wrapper"><pre><code class="hljs shell">chown git:git -R /www/wwwroot/www.wuyinghao.cn/Takuwy.github.io</code></pre></div><h3 id="SSH-Key-配置"><a href="#SSH-Key-配置" class="headerlink" title="SSH Key 配置"></a>SSH Key 配置</h3><p>获取本地电脑 SSH Key</p><div class="code-wrapper"><pre><code class="hljs shell">cat ~/.ssh/id_rsa.pub</code></pre></div><p>添加 SSH Key</p><div class="code-wrapper"><pre><code class="hljs shell">su gitcdmkdir .ssh &amp;&amp; cd .sshtouch authorized_keysvim authorized_keys</code></pre></div><p>将 SSH Key 复制到 VPS 上的 <code>authorized_keys</code> 文件中</p><h3 id="添加-Git-hooks"><a href="#添加-Git-hooks" class="headerlink" title="添加 Git hooks"></a>添加 Git hooks</h3><p>编辑 <code>post-receive</code>  文件</p><div class="code-wrapper"><pre><code class="hljs shell">su gitcdcd blog.git/hooksvim post-receive</code></pre></div><p>输入下列内容</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>GIT_REPO=/home/git/blog.gitTMP_GIT_CLONE=/tmp/blogPUBLIC_WWW=/www/wwwroot/www.wuyinghao.cn/Takuwy.github.iorm -rf <span class="hljs-variable">$&#123;TMP_GIT_CLONE&#125;</span>git <span class="hljs-built_in">clone</span> <span class="hljs-variable">$GIT_REPO</span> <span class="hljs-variable">$TMP_GIT_CLONE</span>rm -rf <span class="hljs-variable">$&#123;PUBLIC_WWW&#125;</span>/*cp -rf <span class="hljs-variable">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class="hljs-variable">$&#123;PUBLIC_WWW&#125;</span></code></pre></div><p><code>/www/wwwroot/www.wuyinghao.cn/Takuwy.github.io</code> 是我的网站路径, 换成你的</p><p>最后修改文件权限</p><div class="code-wrapper"><pre><code class="hljs shell">chmod +x post-receive</code></pre></div><h3 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h3><p>修改本地电脑上的 <code>_config.yml</code> 文件, 添加刚创建的 blog.git 仓库</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span>         <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:Takuwy/Takuwy.github.io.git,main</span>        <span class="hljs-attr">hexo:</span> <span class="hljs-string">git@你的VPS公网IP:blog.git,master</span></code></pre></div><p>这样就完成了, 之后执行 <code>hexo -g d</code> 命令时就可以一起同步在 GitHub 和 VPS 上了.</p>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Github 搭建个人博客</title>
    <link href="/2021/05/02/Hexo+Github%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/05/02/Hexo+Github%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-介绍"><a href="#Hexo-介绍" class="headerlink" title="Hexo 介绍"></a>Hexo 介绍</h2><p>Hexo 是一个快速、简洁且高效的博客框架. Hexo 使用 Markdown 解析文章, 在几秒内, 即可利用靓丽的主题生成静态网页.</p><h2 id="本地搭建"><a href="#本地搭建" class="headerlink" title="本地搭建"></a>本地搭建</h2><p>安装 Hexo 非常简单,  只需几分钟就能安装完成</p><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装之前请确保已经有下列程序:</p><ul><li>Node.js</li><li>Git</li></ul><p>Mac 用户可以使用 brew 安装:</p><p>安装 Node.js</p> <div class="code-wrapper"><pre><code class="hljs shell">brew install node</code></pre></div><p>安装 Git</p> <div class="code-wrapper"><pre><code class="hljs shell">brew install git</code></pre></div><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>执行下列命令安装</p><div class="code-wrapper"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span></code></pre></div><p>安装成功后执行下列命令新建本地博客存放文件夹</p><div class="code-wrapper"><pre><code class="hljs shell">hexo init myBlogcd myBlognpm install</code></pre></div><p>完成之后运行 <code>hexo s</code> 命令, 在浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以看到博客了.</p><p>目前的博客系统只是搭建在本地上, 别人是无法查看的. 那怎么样才能让别人也能看到我们的博客呢? 很简单, 把它部署到 GitHub Pages 上.</p><h2 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h2><h3 id="在-GitHub-上创建仓库"><a href="#在-GitHub-上创建仓库" class="headerlink" title="在 GitHub 上创建仓库"></a>在 GitHub 上创建仓库</h3><p>打开 <a href="https://github.com/">GitHub</a>, 还没有账号就先注册一个. 登录账号后找到左上角的 <strong>+</strong> 点击 <strong>New repository</strong> 创建一个新仓库, 在 <em>Repository name</em> 下填入 <code>你的用户名.github.io</code>  其他的保持默认即可, 点击 <strong>Create repository</strong> 完成.</p><h3 id="配置-SSH-key"><a href="#配置-SSH-key" class="headerlink" title="配置 SSH key"></a>配置 SSH key</h3><p>获取 SSH Key</p><div class="code-wrapper"><pre><code class="hljs shell">cat ~/.ssh/id_rsa.pub</code></pre></div><p>如果之前没有配置 SSH Key, 先执行下列命令配置本地 git 账户</p><div class="code-wrapper"><pre><code class="hljs shell">git config --global user.name &quot;用户名&quot;git config --global user.email &quot;邮箱地址&quot;</code></pre></div><p>生成密钥 SSH key</p><div class="code-wrapper"><pre><code class="hljs shell">ssh-keygen -t rsa -C &#x27;邮箱地址&#x27;</code></pre></div><p>完成后输入 <code>cat ~/.ssh/id_rsa.pub</code> 获取 SSH Key.</p><p>获取之后在 <a href="https://github.com/">Github</a> 上添加 SSH Key, 步骤如下:</p><p><strong>Settings -&gt; SSH and GPG keys  -&gt; New SSH keys -&gt; 输入 Title 粘贴 Key -&gt; Add SSH keys</strong></p><h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p>修改 <code>_config.yml</code> 文件</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span>         <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:[你的用户名]/[你的用户名].github.io.git,master</span></code></pre></div><p>安装部署插件 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p><div class="code-wrapper"><pre><code class="hljs shell">npm install hexo-deployer-git --save</code></pre></div><p>执行下列命令就可以部署上传到 Github 了</p><div class="code-wrapper"><pre><code class="hljs shell">hexo g -d</code></pre></div><p>现在只要在浏览器访问:  <code>你的用户名.github.io</code> 任何人都能看到你的博客了.</p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>执行下列命令来创建一篇新文章</p><div class="code-wrapper"><pre><code class="hljs shell">hexo new &quot;文章名称&quot; <span class="hljs-meta">#</span><span class="bash"> 或者</span> hexo n &quot;文章名称&quot;</code></pre></div><p>文章文件保存在 <code>/source/_posts</code> 中, 可以用支持 <a href="https://zh.wikipedia.org/wiki/Markdown">MarkDown</a> 的编辑器比如 <a href="https://typora.io/">Typora</a> 编写文章. 具体的 MarkDown 语法可以参考我的另一篇文章 <a href="https://www.wuyinghao.cn/2021/05/01/MarkDown-%E8%AF%AD%E6%B3%95/">MarkDown 语法</a></p><p>当然你要是乐意, 也可以用 vim 等纯文本编辑器 (逃</p><h3 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h3><p>执行下列命令就可以在 <a href="http://localhost:4000/">http://localhost:4000</a> 上看到文章了</p><div class="code-wrapper"><pre><code class="hljs shell">hexo ghexo s</code></pre></div><p>最后, 执行下列命令部署在 Github 上</p><div class="code-wrapper"><pre><code class="hljs shell">hexo clean &amp;&amp; hexo g -d</code></pre></div><p>在浏览器打开 <code>你的用户名.github.io</code> 就能看到刚刚编写的新文章了.</p>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MarkDown 语法</title>
    <link href="/2021/05/01/MarkDown-%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/05/01/MarkDown-%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h5 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h5><div class="code-wrapper"><pre><code class="hljs clean"># 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题</code></pre></div><hr><h5 id="效果"><a href="#效果" class="headerlink" title="效果:"></a>效果:</h5><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例:"></a>示例:</h5><div class="code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-strong">**这是加粗的文字**</span><span class="hljs-strong">*这是倾斜的文字*</span>`<span class="hljs-strong">***这是斜体加粗的文字**</span>*~~这是加删除线的文字~~</code></pre></div><hr><h5 id="效果-1"><a href="#效果-1" class="headerlink" title="效果:"></a>效果:</h5><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><em><strong>这是斜体加粗的文字</strong></em><br><del>这是加删除线的文字</del></p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例:"></a>示例:</h5><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">这是引用的内容</span><span class="hljs-meta">&gt;</span><span class="bash">&gt;这是引用的内容</span><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt;这是引用的内容</span></code></pre></div><hr><h5 id="效果-2"><a href="#效果-2" class="headerlink" title="效果:"></a>效果:</h5><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote><hr><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例:"></a>示例:</h5><div class="code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-section">---</span><span class="hljs-section">----</span><span class="hljs-bullet">***</span><span class="hljs-bullet"></span><span class="hljs-strong">*****</span></code></pre></div><hr><h5 id="效果-3"><a href="#效果-3" class="headerlink" title="效果:"></a>效果:</h5><hr><hr><hr><hr><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h5 id="示例-4"><a href="#示例-4" class="headerlink" title="示例:"></a>示例:</h5><div class="code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 列表内容<span class="hljs-bullet">+</span> 列表内容<span class="hljs-bullet">*</span> 列表内容<span class="hljs-bullet">1.</span> 列表内容<span class="hljs-bullet">2.</span> 列表内容<span class="hljs-bullet">3.</span> 列表内容</code></pre></div><hr><h5 id="效果-4"><a href="#效果-4" class="headerlink" title="效果:"></a>效果:</h5><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h5 id="示例-5"><a href="#示例-5" class="headerlink" title="示例:"></a>示例:</h5><div class="code-wrapper"><pre><code class="hljs gherkin">|<span class="hljs-string"> 表头 </span>|<span class="hljs-string"> 表头 </span>|<span class="hljs-string"> 表头 </span>||<span class="hljs-string"> :--- </span>|<span class="hljs-string"> :--: </span>|<span class="hljs-string"> ---: </span>||<span class="hljs-string"> 单元 </span>|<span class="hljs-string"> 单元 </span>|<span class="hljs-string"> 单元 </span>||<span class="hljs-string"> 单元 </span>|<span class="hljs-string"> 单元 </span>|<span class="hljs-string"> 单元 </span>|</code></pre></div><hr><h5 id="效果-5"><a href="#效果-5" class="headerlink" title="效果:"></a>效果:</h5><table><thead><tr><th align="left">表头</th><th align="center">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td align="left">单元</td><td align="center">单元</td><td align="right">单元</td></tr><tr><td align="left">单元</td><td align="center">单元</td><td align="right">单元</td></tr></tbody></table><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h5 id="示例-6"><a href="#示例-6" class="headerlink" title="示例:"></a>示例:</h5><div class="code-wrapper"><pre><code class="hljs awk">![名字](图片链接)举个栗子: ![(pid-<span class="hljs-number">59720220</span>)trickorkiss](https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>Takuwy<span class="hljs-regexp">/oos@master/u</span>Pic/(pid-<span class="hljs-number">59720220</span>)trick%<span class="hljs-number">20</span>or%<span class="hljs-number">20</span>kiss.jpg)</code></pre></div><hr><h5 id="效果-6"><a href="#效果-6" class="headerlink" title="效果:"></a>效果:</h5><p><img src="https://cdn.jsdelivr.net/gh/Takuwy/oos@master/uPic/(pid-59720220)trick%20or%20kiss.jpg" alt="(pid-59720220)trickorkiss"></p><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h5 id="示例-7"><a href="#示例-7" class="headerlink" title="示例:"></a>示例:</h5><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-attr">[网站]</span>(链接)举个栗子:<span class="hljs-selector-attr">[Google]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//www.google.com/)</span></code></pre></div><hr><h5 id="效果-7"><a href="#效果-7" class="headerlink" title="效果:"></a>效果:</h5><p><a href="https://www.google.com/">Google</a></p><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h5 id="示例-8"><a href="#示例-8" class="headerlink" title="示例:"></a>示例:</h5><div class="code-wrapper"><pre><code class="hljs kotlin">代码块:​```kotlin<span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        loadAppList()    &#125;​```单行代码:`git <span class="hljs-keyword">init</span>`</code></pre></div><hr><h5 id="效果-8"><a href="#效果-8" class="headerlink" title="效果:"></a>效果:</h5><p>代码块:</p><div class="code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        loadAppList()    &#125;</code></pre></div><p>单行代码:</p><p><code>git init</code></p><hr><h2 id="Mermaid-流程图"><a href="#Mermaid-流程图" class="headerlink" title="Mermaid 流程图"></a>Mermaid 流程图</h2><h5 id="示例-9"><a href="#示例-9" class="headerlink" title="示例:"></a>示例:</h5><div class="code-wrapper"><pre><code class="hljs coq">​```mermaidgraph TDA(Start) --&gt; B[You Operation]B --&gt; C&#123;Yes or No&#125;C --&gt;|<span class="hljs-type">yes</span>| <span class="hljs-type">D</span>[<span class="hljs-keyword">End</span>]C --&gt;|<span class="hljs-type">No</span>| <span class="hljs-type">B</span>[You Operation]</code></pre></div><hr><h5 id="效果-9"><a href="#效果-9" class="headerlink" title="效果:"></a>效果:</h5><pre><code class=" mermaid">graph TDA(Start) --&gt; B[You Operation]B --&gt; C&#123;Yes or No&#125;C --&gt;|yes| D[End]C --&gt;|No| B[You Operation]</code></pre>]]></content>
    
    
    <categories>
      
      <category>记录向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MarkDown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10 下配置 Android Studio 的 Java 环境变量</title>
    <link href="/2020/04/20/Win10-%E4%B8%8B%E9%85%8D%E7%BD%AE-Android-Studio-%E7%9A%84-Java-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <url>/2020/04/20/Win10-%E4%B8%8B%E9%85%8D%E7%BD%AE-Android-Studio-%E7%9A%84-Java-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>Android Studio的JDK在安装文件夹下的 jre 里, 我的是</p><p><code>F:\Program Files\Android\Android Studio\jre</code></p><p>新建环境变量名为 <code>JAVA_HOME</code> , 变量值:</p><p><code>F:\Program Files\Android\Android Studio\jre</code></p><p>再新建一个变量名为 <code>CLASSPATH</code> , 变量值:</p><p><code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code></p><p>双击Path, 新建 <code>%JAVA_HOME%\bin</code> 和 ``%JAVA_HOME%\jre\bin`</p><h3 id="确认环境配置是否正确"><a href="#确认环境配置是否正确" class="headerlink" title="确认环境配置是否正确"></a>确认环境配置是否正确</h3><p>打开cdm 输入:</p><div class="code-wrapper"><pre><code class="hljs shell">java -version</code></pre></div><p>就能看到 java 版本, 再输入:</p><div class="code-wrapper"><pre><code class="hljs shell">java</code></pre></div><p>和</p><div class="code-wrapper"><pre><code class="hljs `shell">javac</code></pre></div><p>显示有输出就说明环境变量配置正确.</p>]]></content>
    
    
    <categories>
      
      <category>记录向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境变量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10 使用 apksigner 对 apk 进行签名</title>
    <link href="/2020/04/20/Win10-%E4%BD%BF%E7%94%A8-apksigner-%E5%AF%B9-apk-%E8%BF%9B%E8%A1%8C%E7%AD%BE%E5%90%8D/"/>
    <url>/2020/04/20/Win10-%E4%BD%BF%E7%94%A8-apksigner-%E5%AF%B9-apk-%E8%BF%9B%E8%A1%8C%E7%AD%BE%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>首先要将 SDK Build Tools 加入到环境变量中, 我的在</p><p><code>C:\Users\25423\AppData\Local\Android\Sdk\build-tools\29.0.3</code></p><p>29.0.3是目前的版本号</p><p>配置环境变量:</p><p>点击Path, 新建, 把环境路径复制进去<br>打开 cmd 输入:</p><div class="code-wrapper"><pre><code class="hljs shell">apksigner</code></pre></div><p>有输出表示环境配置成功.</p><h3 id="对apk进行签名"><a href="#对apk进行签名" class="headerlink" title="对apk进行签名"></a>对apk进行签名</h3><p>使用 zipalign 优化应用:</p><div class="code-wrapper"><pre><code class="hljs shell">zipalign -v 4 Original.apk Out.apk</code></pre></div><p>-v 是开启详细输出, 4 是将资源文件对齐到 4 字节. 当然也可以使用 -f 覆盖文件输出.</p><p>使用 apksigner 进行签名:</p><div class="code-wrapper"><pre><code class="hljs shell">apksigner sign --ks key文件.jks --ks-key-alias 别名 Out.apk</code></pre></div><p>之后输入密码就签名完成了.</p>]]></content>
    
    
    <categories>
      
      <category>记录向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>apksigner</tag>
      
      <tag>apk签名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Debian 上安装Node.js</title>
    <link href="/2019/06/21/%E5%9C%A8Debian-%E4%B8%8A%E5%AE%89%E8%A3%85Node-js/"/>
    <url>/2019/06/21/%E5%9C%A8Debian-%E4%B8%8A%E5%AE%89%E8%A3%85Node-js/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Node.js 就是运行在服务端的 JavaScript。</p><p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p><p><a href="https://github.com/nodesource/distributions">Github地址</a></p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h4 id="添加Node-js-PPA"><a href="#添加Node-js-PPA" class="headerlink" title="添加Node.js PPA:"></a>添加Node.js PPA:</h4><p>以下是目前的最新版:</p><div class="code-wrapper"><pre><code class="hljs shell">curl -sL https://deb.nodesource.com/setup_12.x | bash</code></pre></div><h4 id="安装Node-js和NPM"><a href="#安装Node-js和NPM" class="headerlink" title="安装Node.js和NPM:"></a>安装Node.js和NPM:</h4><div class="code-wrapper"><pre><code class="hljs shell">apt-get install -y nodejs</code></pre></div><h4 id="检查Node-js和NPM版本"><a href="#检查Node-js和NPM版本" class="headerlink" title="检查Node.js和NPM版本:"></a>检查Node.js和NPM版本:</h4><p>查看Node.js版本</p><div class="code-wrapper"><pre><code class="hljs shell">node -v</code></pre></div><p>查看npm版本</p><div class="code-wrapper"><pre><code class="hljs shell">npm -v</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>记录向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debian 更改 dns</title>
    <link href="/2019/06/21/Debian-%E6%9B%B4%E6%94%B9-dns/"/>
    <url>/2019/06/21/Debian-%E6%9B%B4%E6%94%B9-dns/</url>
    
    <content type="html"><![CDATA[<h2 id="修改dns所在文件"><a href="#修改dns所在文件" class="headerlink" title="修改dns所在文件"></a>修改dns所在文件</h2><div class="code-wrapper"><pre><code class="hljs shell">vim /etc/resolv.conf</code></pre></div><p><strong>打开后键入谷歌 dns :</strong></p><div class="code-wrapper"><pre><code class="hljs json">nameserver <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span>nameserver <span class="hljs-number">4.4</span><span class="hljs-number">.4</span><span class="hljs-number">.4</span></code></pre></div><h2 id="改变文件属性-防止重启后自动恢复"><a href="#改变文件属性-防止重启后自动恢复" class="headerlink" title="改变文件属性 (防止重启后自动恢复) :"></a>改变文件属性 (防止重启后自动恢复) :</h2><div class="code-wrapper"><pre><code class="hljs shell">chattr +i /etc/resolv.conf</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>记录向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dns</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
